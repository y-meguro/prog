;***********************************************************
;  マクロ
;***********************************************************
%include "../include/define.s"
%include "../include/macro.s"

        ORG BOOT_LOAD

;***********************************************************
;  エントリポイント
;***********************************************************
entry:
        ;------------------------------------------
        ; BPB(BIOS Parameter Block)
        ;------------------------------------------
        jmp ipl
        times 3 - ($ - $$) db 0x90
        db 'OEM-NAME'

        dw 512
        db 1
        dw 32
        db 2
        dw 512
        dw 0xFFF0
        db 0xF8
        dw 256
        dw 0x10
        dw 2
        dd 0

        dd 0
        db 0x80
        db 0
        db 0x29
        dd 0xbeef
        db 'BOOTABLE   '
        db 'FAT16   '

        ;------------------------------------------
        ; IPL(Initial Program Loader)
        ;------------------------------------------
ipl:
        cli

        mov ax, 0x0000
        mov ds, ax
        mov es, ax
        mov ss, ax
        mov sp, BOOT_LOAD

        sti

        mov [BOOT + drive.no], dl

        ;------------------------------------------
        ; 文字列を表示
        ;------------------------------------------
        cdecl puts, .s0

        ;------------------------------------------
        ; 残りのセクタをすべて読み込む
        ;------------------------------------------
        mov bx, BOOT_SECT - 1
        mov cx, BOOT_LOAD + SECT_SIZE

        cdecl read_chs, BOOT, bx, cx

        cmp ax, bx
.10Q:
        jz .10E
.10T:
        cdecl puts, .e0
        call reboot
.10E:

        ;------------------------------------------
        ; 次のステージへ移行
        ;------------------------------------------
        jmp stage_2

        ;------------------------------------------
        ; データ
        ;------------------------------------------
.s0     db "Booting...", 0x0A, 0x0D, 0
.e0     db "Error:sector read", 0

;***********************************************************
;  ブートドライブに関する情報
;***********************************************************
ALIGN 2, db 0
BOOT:
        istruc drive
            at drive.no, dw 0
            at drive.cyln, dw 0
            at drive.head, dw 0
            at drive.sect, dw 2
        iend

;***********************************************************
;  モジュール
;***********************************************************
%include "../modules/real/puts.s"
%include "../modules/real/reboot.s"
%include "../modules/real/read_chs.s"

;***********************************************************
;  ブートフラグ(先頭512バイトの終了)
;***********************************************************
        times 510 - ($ - $$) db 0x00
        db 0x55, 0xAA

;***********************************************************
;  リアルモード時に取得した情報
;***********************************************************
FONT:
.seg:   dw 0
.off:   dw 0
ACPI_DATA:
.adr:   dd 0
.len:   dd 0

;***********************************************************
;  モジュール(先頭512バイト以降に配置)
;***********************************************************
%include "../modules/real/itoa.s"
%include "../modules/real/get_drive_param.s"
%include "../modules/real/get_font_adr.s"
%include "../modules/real/get_mem_info.s"
%include "../modules/real/kbc.s"
%include "../modules/real/lba_chs.s"
%include "../modules/real/read_lba.s"
%include "../modules/real/memcpy.s"
%include "../modules/real/memcmp.s"

;***********************************************************
;  ブート処理の第2ステージ
;***********************************************************
stage_2:
        ;------------------------------------------
        ; 文字列を表示
        ;------------------------------------------
        cdecl puts, .s0

        ;------------------------------------------
        ; ドライブ情報を取得
        ;------------------------------------------
        cdecl get_drive_param, BOOT
        cmp ax, 0
.10Q:
        jne .10E
.10T:
        cdecl puts, .e0
        call reboot
.10E:

        ;------------------------------------------
        ; ドライブ情報を取得
        ;------------------------------------------
        mov ax, [BOOT + drive.no]
        cdecl itoa, ax, .p1, 2, 16, 0b0100
        mov ax, [BOOT + drive.cyln]
        cdecl itoa, ax, .p2, 4, 16, 0b0100
        mov ax, [BOOT + drive.head]
        cdecl itoa, ax, .p3, 2, 16, 0b0100
        mov ax, [BOOT + drive.sect]
        cdecl itoa, ax, .p4, 2, 16, 0b0100
        cdecl puts, .s1

        ;------------------------------------------
        ; 次のステージへ移行
        ;------------------------------------------
        jmp stage_3rd

        ;------------------------------------------
        ; データ
        ;------------------------------------------
.s0     db "2nd stage...", 0x0A, 0x0D, 0
.s1     db " Drive:0x"
.p1     db "  , C:0x"
.p2     db "    , H:0x"
.p3     db "  , S:0x"
.p4     db "  ", 0x0A, 0x0D, 0
.e0     db "Can't get drive parameter.", 0

;***********************************************************
;  ブート処理の第3ステージ
;***********************************************************
stage_3rd:
        ;------------------------------------------
        ; 文字列を表示
        ;------------------------------------------
        cdecl puts, .s0

        ;------------------------------------------
        ; プロテクトモードで使用するフォントは、
        ; BIOSに内蔵されたものを流用する
        ;------------------------------------------
        cdecl get_font_adr, FONT

        ;------------------------------------------
        ; フォントアドレスの表示
        ;------------------------------------------
        cdecl itoa, word[FONT.seg], .p1, 4, 16, 0b0100
        cdecl itoa, word[FONT.off], .p2, 4, 16, 0b0100
        cdecl puts, .s1

        ;------------------------------------------
        ; メモリ情報の取得と表示
        ;------------------------------------------
        cdecl get_mem_info

        mov eax, [ACPI_DATA.adr]
        cmp eax, 0
        je .10E

        cdecl itoa, ax, .p4, 4, 16, 0b0100
        shr eax, 16
        cdecl itoa, ax, .p3, 4, 16, 0b0100
        cdecl puts, .s2
.10E:

        ;------------------------------------------
        ; 次のステージへ移行
        ;------------------------------------------
        jmp stage_4

        ;------------------------------------------
        ; データ
        ;------------------------------------------
.s0     db "3rd stage...", 0x0A, 0x0D, 0
.s1     db " Font Address="
.p1     db "ZZZZ:"
.p2     db "ZZZZ", 0x0A, 0x0D, 0
        db 0x0A, 0x0D, 0
.s2     db " ACPI data="
.p3     db "ZZZZ"
.p4     db "ZZZZ", 0x0A, 0x0D, 0

;***********************************************************
;  ブート処理の第4ステージ
;***********************************************************
stage_4:
        ;------------------------------------------
        ; 文字列を表示
        ;------------------------------------------
        cdecl puts, .s0

        ;------------------------------------------
        ; A20ゲートの有効化
        ;------------------------------------------
        cli

        cdecl KBC_Cmd_Write, 0xAD

        cdecl KBC_Cmd_Write, 0xD0
        cdecl KBC_Data_Read, .key

        mov bl, [.key]
        or bl, 0x02

        cdecl KBC_Cmd_Write, 0xD1
        cdecl KBC_Data_Write, bx

        cdecl KBC_Cmd_Write, 0xAE

        sti

        ;------------------------------------------
        ; 文字列を表示
        ;------------------------------------------
        cdecl puts, .s1

        ;------------------------------------------
        ; キーボードLEDのテスト
        ;------------------------------------------
        cdecl puts, .s2

        mov bx, 0
.10L:
        mov ah, 0x00
        int 0x16

        cmp al, '1'
        jb .10E

        cmp al, '3'
        ja .10E

        mov cl, al
        dec cl
        and cl, 0x03
        mov ax, 0x0001
        shl ax, cl
        xor bx, ax

        ;------------------------------------------
        ; LEDコマンドの送信
        ;------------------------------------------
        cli

        cdecl KBC_Cmd_Write, 0xAD

        cdecl KBC_Data_Write, 0xED
        cdecl KBC_Data_Read, .key

        cmp [.key], byte 0xFA
        jne .11F

        cdecl KBC_Data_Write, bx
        jmp .11E
.11F:
        cdecl itoa, word[.key], .e1, 2, 16, 0b0100
        cdecl puts, .e0
.11E:
        cdecl KBC_Cmd_Write, 0xAE

        sti

        jmp .10L
.10E:

        ;------------------------------------------
        ; 文字列を表示
        ;------------------------------------------
        cdecl puts, .s3

        ;------------------------------------------
        ; 次のステージへ移行
        ;------------------------------------------
        jmp stage_5

        ;------------------------------------------
        ; データ
        ;------------------------------------------
.s0:    db "4th stage...", 0x0A, 0x0D, 0
.s1:    db " A20 Gate Enabled.", 0x0A, 0x0D, 0
.s2:    db " Keyboard LED Test...", 0
.s3:    db " (done)", 0x0A, 0x0D, 0
.e0:    db "["
.e1:    db "ZZ]", 0
.key:   dw 0

;***********************************************************
;  ブート処理の第5ステージ
;***********************************************************
stage_5:
        ;------------------------------------------
        ; 文字列を表示
        ;------------------------------------------
        cdecl puts, .s0

        ;------------------------------------------
        ; カーネルを読み込む
        ;------------------------------------------
        cdecl read_lba, BOOT, BOOT_SECT, KERNEL_SECT, BOOT_END
        cmp ax, KERNEL_SECT
.10Q:
        jz .10E
.10T:
        cdecl puts, .e0
        call reboot
.10E:

        ;------------------------------------------
        ; 次のステージへ移行
        ;------------------------------------------
        jmp stage_6

        ;------------------------------------------
        ; データ
        ;------------------------------------------
.s0:    db "5th stage...", 0x0A, 0x0D, 0
.e0:    db " Failure load kernel...", 0x0A, 0x0D, 0

;***********************************************************
;  ブート処理の第6ステージ
;***********************************************************
stage_6:
        ;------------------------------------------
        ; 文字列を表示
        ;------------------------------------------
        cdecl puts, .s0

        ;------------------------------------------
        ; ユーザーからの入力待ち
        ;------------------------------------------
.10L:
        mov ah, 0x00
        int 0x16
        cmp al, ' '
        jne .10L

        ;------------------------------------------
        ; ビデオモードの設定
        ;------------------------------------------
        mov ax, 0x0012
        int 0x10

        ;------------------------------------------
        ; 次のステージへ移行
        ;------------------------------------------
        jmp stage_7

        ;------------------------------------------
        ; データ
        ;------------------------------------------
.s0:    db "6th stage...", 0x0A, 0x0D, 0x0A, 0x0D
        db " [Push SPACE key to protect mode...]", 0x0A, 0x0D, 0

;***********************************************************
;  ファイル読み込み
;***********************************************************
read_file:
        cdecl memcpy, 0x7800, .s0, .s1 - .s0

        ret

.s0:    db 'File not found.', 0
.s1:

;***********************************************************
;  GLOBAL DESCRIPTOR TABLE
;  (セグメントディスクリプタの配列)
;***********************************************************
ALIGN 4, db 0
GDT:    dq 0x00_0_0_0_0_000000_0000
.cs:    dq 0x00_C_F_9_A_000000_FFFF
.ds:    dq 0x00_C_F_9_2_000000_FFFF
.gdt_end:

;==========================================
;  セレクタ
;==========================================
SEL_CODE equ .cs - GDT
SEL_DATA equ .ds - GDT

;==========================================
;  GDT
;==========================================
GDTR:   dw GDT.gdt_end - GDT - 1
        dd GDT

;==========================================
;  IDT(疑似:割り込み禁止にするため)
;==========================================
IDTR:   dw 0
        dd 0

;***********************************************************
;  ブート処理の第7ステージ
;***********************************************************
stage_7:
        cli

        ;------------------------------------------
        ; GDTロード
        ;------------------------------------------
        lgdt [GDTR]
        lidt [IDTR]

        ;------------------------------------------
        ; プロテクトモードへ移行
        ;------------------------------------------
        mov eax, cr0
        or ax, 1
        mov cr0, eax

        jmp $ + 2

        ;------------------------------------------
        ; セグメント間ジャンプ
        ;------------------------------------------
[BITS 32]
        DB 0x66
        jmp SEL_CODE:CODE_32

;***********************************************************
;  32ビットコードを開始
;***********************************************************
CODE_32:
        ;------------------------------------------
        ; セレクタを初期化
        ;------------------------------------------
        mov ax, SEL_DATA
        mov ds, ax
        mov es, ax
        mov fs, ax
        mov gs, ax
        mov ss, ax

        ;------------------------------------------
        ; カーネル部をコピー
        ;------------------------------------------
        mov ecx, (KERNEL_SIZE) / 4
        mov esi, BOOT_END
        mov edi, KERNEL_LOAD
        cld
        rep movsd

        ;------------------------------------------
        ; カーネル処理に移行
        ;------------------------------------------
        jmp KERNEL_LOAD

;***********************************************************
;  リアルモードへの移行プログラム
;***********************************************************
TO_REAL_MODE:
        ;-----------------------------------------
        ; 【スタックフレームの構築】
        ;-----------------------------------------
        push ebp
        mov ebp, esp

        ;-----------------------------------------
        ; 【レジスタの保存】
        ;-----------------------------------------
        pusha

        cli

        ;-----------------------------------------
        ; 現在の設定値を保存
        ;-----------------------------------------
        mov eax, cr0
        mov [.cr0_saved], eax
        mov [.esp_saved], esp
        sidt [.idtr_save]
        lidt [.idtr_real]

        ;-----------------------------------------
        ; 16ビットのプロテクトモードに移行
        ;-----------------------------------------
        jmp 0x0018:.bit16
[BITS 16]
.bit16:	mov ax, 0x0020
        mov ds, ax
        mov es, ax
        mov ss, ax

        ;-----------------------------------------
        ; リアルモードへ移行(ページング無効化)
        ;-----------------------------------------
        mov eax, cr0
        and eax, 0x7FFF_FFFE
        mov cr0, eax
        jmp $ + 2

        ;-----------------------------------------
        ; セグメント設定(リアルモード)
        ;-----------------------------------------
        jmp 0:.real
.real:	mov ax, 0x0000
        mov ds, ax
        mov es, ax
        mov ss, ax
        mov sp, 0x7C00

        ;-----------------------------------------
        ; ファイル読み込み
        ;-----------------------------------------
        cdecl read_file

        ;-----------------------------------------
        ; 16ビットプロテクトモードに移行
        ;-----------------------------------------
        mov eax, cr0
        or eax, 1
        mov cr0, eax

        jmp $ + 2

        ;-----------------------------------------
        ; 32ビットプロテクトモードに移行
        ;-----------------------------------------
        DB 0x66
[BITS 32]
        jmp 0x0008:.bit32
.bit32: mov ax, 0x0010
        mov ds, ax
        mov es, ax
        mov ss, ax

        ;-----------------------------------------
        ; レジスタ設定の復帰
        ;-----------------------------------------
        mov esp, [.esp_saved]
        mov eax, [.cr0_saved]
        mov cr0, eax
        lidt [.idtr_save]

        sti

        ;-----------------------------------------
        ; 【レジスタの復帰】
        ;-----------------------------------------
        popa

        ;-----------------------------------------
        ; 【スタックフレームの破棄】
        ;-----------------------------------------
        mov esp, ebp
        pop ebp

        ret

.idtr_real:
        dw 0x3FF
        dd 0

.idtr_save:
        dw 0
        dd 0

.cr0_saved:
        dd 0

.esp_saved:
        dd 0

;***********************************************************
;  パディング
;***********************************************************
        times BOOT_SIZE - ($ - $$) - 16 db 0

        dd TO_REAL_MODE

;***********************************************************
;  パディング（このファイルは8Kバイトとする）
;***********************************************************
        times BOOT_SIZE - ($ - $$) db 0